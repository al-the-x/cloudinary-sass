// FIXME: Don't pollute the main namespace once `libsass  / `sass-loader` recognize `@use`
@use "./string" as *;
@use "./responsive" as *;

$CLOUDINARY_CLOUD_NAME: "demo" !default;


@function cloudinary-params($names...){
  $PARAMETERS: (
    width: w,
    height: h,
    crop: c,
    aspect_ratio: ar,
    gravity: g,
    zoom: z,
    x: x,
    y: y,
    // `format` is set via file extension
    fetch_format: f,
    quality: q,
    radius: r,
    angle: a,
    effect: e,
    opacity: o,
    border: bo,
    background: b,
    overlay: l,
    underlay: u,
    default_image: d,
    delay: dl,
    color: co,
    color_space: cs,
    dpr: dpr,
    page: pg,
    density: dn,
    flags: fl,
    transformation: t,
    "if": "if",
    custom_function: fn,
    variable: "$",
  );

  $kwargs: keywords($names);

  // validate $kwargs, since we have to use variable $transformations
  $invalid-kwargs: map-remove($kwargs, map-keys($PARAMETERS)...);
  @if length($invalid-kwargs) > 0 {
    @error "Invalid parameters: #{map-keys($invalid-kwargs)}";
  }

  $params: ( );

  @each $kwarg, $value in $kwargs {
    $params: map-merge($params, (map-get($PARAMETERS, $kwarg): $value));
  }

  @return $params;
}


@function cloudinary-transformations(
  $transformations...
){
  $params: cloudinary-params($transformations...);

  $segments: ( );

  @each $param, $value in $params {
    @if $param and $value {
      $segments: append($segments, "#{$param}_#{$value}");
    }
  }

  // @debug "cloudinary-transformations:$segments", $segments;

  @if length($segments) > 0 {
    @return str-join($segments, ",");
  }

  @return null;
}


@function cloudinary-url(
  $public-id,
  $cloud-name: $CLOUDINARY_CLOUD_NAME,
  $resource-type: image, // or `video`
  $type: upload, // or `fetch`
  $transformations...
){
  $segments: (
    "https://res.cloudinary.com",
    $cloud-name,
    $resource-type,
    $type,
  );

  $transformation-segment: cloudinary-transformations($transformations...);
  @if $transformation-segment {
    $segments: append($segments, $transformation-segment);
  }

  @return str-join(append($segments, $public-id), "/");
}


// @return map($resolution: cloudinary-url, ...) for each $cloudinary-params-by-resolution
@function cloudinary-responsive-urls(
  $public-id,
  $cloudinary-params-by-resolution, // ($resolution: string, $cloudinary-params: ($name: $value, ...))
  $transformations...
){
  $default-params: keywords($transformations);

  $cloudinary-urls: ( );
  @each $resolution, $resolution-params in $cloudinary-params-by-resolution {
    $cloudinary-params: map-merge($default-params, map-merge(
      (public-id: $public-id),
      $resolution-params,
    ));

    $cloudinary-urls: map-merge($cloudinary-urls, (
      $resolution: cloudinary-url(
        // Passing anything less than ALL the args with a splatted `map` causes
        // `libsass` to try mapping the splat to named args, causing an error,
        // even if the splat has keys that map to the arg names. Known bug:
        //
        // $cloudinary-params... // FIXME: after https://github.com/sass/libsass/issues/2818
        map-get($cloudinary-params, public-id) or $public-id,
        map-get($cloudinary-params, cloud-name) or $CLOUDINARY_CLOUD_NAME,
        map-get($cloudinary-params, resource-type) or image,
        map-get($cloudinary-params, type) or upload,
        map-remove($cloudinary-params,
          "public-id", "cloud-name", "resource-type", "type"
        )...
      )
    ));
  }

  @return $cloudinary-urls;
}


@mixin cloudinary-responsive-background-image(
  $public-id,
  $cloudinary-params-by-resolution,
  $prefixed: $RESPONSIVE_IMAGE_SET_PREFIXED,
  $transformations...
){
  @include responsive-background-image(
    $prefixed: $prefixed,
    $urls-by-resolution: cloudinary-responsive-urls(
      $public-id,
      $cloudinary-params-by-resolution,
      $transformations...
    ),
  );
}
